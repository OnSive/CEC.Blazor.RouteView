<div class="container-fluid">
    <div class="row my-2">
        <div class="col-12">
            <h3>Add a Custom Route</h3>
        </div>
    </div>
    <div class="row my-2">
        <div class="col-5">
            Select a Page and a new route (no spaces please)
        </div>
        <div class="col-2">
            <select @bind="@this.selectedid" class="form-control">
                @foreach (var type in Routes)
                {
                    if (type.Value.Name.Equals(selected, StringComparison.CurrentCultureIgnoreCase))
                    {
                        <option value="@type.Key" selected>@type.Value.Name</option>
                    }
                    else
                    {
                        <option value="@type.Key">@type.Value.Name</option>
                    }
                }
            </select>
        </div>
        <div class="col-3">
            <input @bind-value="this.newRoute" class="form-control" />
        </div>
        <div class="col-2 text-right">
            <button class="btn btn-success ml-2" @onclick="() => GoToRoute(newRoute)">Go to this Route</button>
        </div>
    </div>
    <div class="row my-2">
        <div class="col-12">
            <h3>Change View without Navigation</h3>
        </div>
    </div>
    <div class="row my-2">
        <div class="col-12 text-right">
            <button class="btn btn-dark ml-3" @onclick="() => GoToView(typeof(FetchData))">Go to FetchData</button>
        </div>
    </div>
    <div class="row my-2">
        <div class="col-12">
            <h3>Change Layout</h3>
        </div>
    </div>
    <div class="row my-2">
        <div class="col-12 text-right">
            <button class="@_layoutButtonCss" @onclick="() => ChangeLayout()">@_layoutButtonText</button>
        </div>
    </div>
</div>

@code {

    [CascadingParameter] private RouteViewManager RouteViewManager { get; set; }

    [Inject] RouteViewService RouteViewService { get; set; }

    [Inject] NavigationManager NavManager { get; set; }

    private string _layoutButtonText => RouteViewService.Layout != null ? "Switch to Normal Layout" : "Switch to Red Layout";

    private string _layoutButtonCss => RouteViewService.Layout != null ? "btn btn-danger ml-3" : "btn btn-primary ml-3";

    private SortedDictionary<string, Type> Routes { get; set; }

    protected override Task OnInitializedAsync()
    {
        Routes = new SortedDictionary<string, Type>();
        foreach (var item in Utils.GetTypesWithCustomAttribute(typeof(App).Assembly, typeof(RouteAttribute)))
            Routes.Add(Guid.NewGuid().ToString(), item);
        return base.OnInitializedAsync();
    }

    private string newRoute = string.Empty;

    private string selected = "Counter";

    private string selectedid = string.Empty;

    private async void GoToView(Type view)
    => await RouteViewManager.LoadViewAsync(view);

    private Task GoToRoute(string url)
    {
        var route = $"^\\/{url}";
        var selectedtype = Routes[selectedid] ?? typeof(Counter) ;
        selected = selectedtype.Name;
        if (!RouteViewService.Routes.Any(item => item.RouteMatch.Equals(route, StringComparison.CurrentCultureIgnoreCase)))
            RouteViewService.Routes.Add(new CustomRouteData() { PageType = selectedtype, RouteMatch = route });
        NavManager.NavigateTo(url);
        return Task.CompletedTask;
    }

    private async void ChangeLayout()
    {
        if (RouteViewService.Layout != null)
            RouteViewService.Layout = null;
        else
            RouteViewService.Layout = typeof(RedLayout);
        await RouteViewManager.RenderAsync();
    }

}
